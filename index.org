#+TITLE: Document title
#+LANGUAGE: en
#+OPTIONS: toc:nil h:4 html-postamble:nil html-preamble:t tex:t
#+HTML_CONTAINER: div
#+HTML_DOCTYPE: <!DOCTYPE html>
#+HTML_HEAD: <link href="http://fonts.googleapis.com/css?family=Roboto+Slab:400,700|Inconsolata:400,700" rel="stylesheet" type="text/css" />
#+HTML_HEAD: <link href="css/style.css" rel="stylesheet" type="text/css" />

#+LINK: gh    https://github.com/
#+LINK: rfc   https://tools.ietf.org/html/
#+LINK: thing https://github.com/thi-ng/
#+LINK: w3    https://w3.org/TR/
#+LINK: wiki  https://en.wikipedia.org/wiki/

#+HTML: <div class="outline-2" id="meta">
| *Author* | Karsten Schmidt      |
| *Date*   | {{{time(%Y-%m-%d %H:%M:%S)}}}  |
#+HTML: </div>

#+TOC: headlines 3

* Introduction
  :PROPERTIES:
  :CUSTOM_ID: section-intro
  :END:

** TODO Abstract

Brief outline description of the document[fn:intro]...

[fn:intro] Example footnote, can also contain [[thing:org-spec][links]].

** DONE Scope

Topics covered by this specification:

- [[#section-sys-arch][System architecture]] - design guidelines, data models, roles &
  responsibilities
- [[#section-client-server][Client / server communication]] - protocols and implementation details
  between system modules

** Status of This Document

*May Be Superseded*

This section describes the status of this document at the time of its
publication. Other documents may supersede this document.

*** Changes since the last version
    :PROPERTIES:
    :CUSTOM_ID: changelog
    :END:

#+BEGIN_COMMENT
The code block below MUST be manually evaluated by placing the cursor
into the codeblock and typing =C-c C-c=.

In order for the changelog to work, please change the =tag= variable
for the code block below to the tag of your last published version.
#+END_COMMENT

#+HTML: <ul>
#+BEGIN_SRC shell :exports results :results value html :var TAG='v0.0'
RES=`git log $TAG...HEAD --pretty="<li>%s</li>" -- *.org`
if [ -z $RES ]; then
  RES="<li>no changes</li>"
fi
echo $RES
#+END_SRC

#+RESULTS:
#+BEGIN_HTML
<li>no changes</li>
#+END_HTML

#+HTML: </ul>

** Conventions

The key words *MUST*, *MUST NOT*, *REQUIRED*, *SHOULD*, *SHOULD NOT*,
*RECOMMENDED*, *MAY*, and *OPTIONAL* in this specification are to be
interpreted as described in [[rfc:2119][RFC2119]].

Since a document and project of this nature deals with a large number
of technologies, each with their own set of acronyms, please refer to
the glossary in [[#section-glossary][Appendix A]], which briefly explains some of them.

*** Definition of project specific terms

In this document:

- Term A :: is a...
- Term B :: is a...

* System architecture
  :PROPERTIES:
  :CUSTOM_ID: section-sys-arch
  :VERSION:  1.0
  :END:

** System actors, roles & responsibilities
*** Users
*** Client
*** Server
** General system design guidelines
*** User experience
*** Accessibility
*** Data formats
*** Performance
*** Security
*** Layered architecture

Example of generating block diagrams from ASCII art using =ditaa=:

#+BEGIN_SRC ditaa :file assets/arch.png :cmdline -r :exports results
  +-------------------+ +-------------------+ +-------------------+
  |                   | |                   | |                   |
  |     Module #1     | |     Module #2     | |     Module #3     |
  |                   | |                   | |                   |
  +---------+---------+ +---------+---------+ +---------+---------+
            |                     |                     |
            v                     v                     v
  +---------+---------------------+---------------------+---------+
  |cBLK                                                           |
  |                    Core platform services                     |
  |                                                               |
  +---------------------------------------------------------------+
#+END_SRC

#+CAPTION: Top-level, schematic overview of layered client architecture
#+RESULTS:
[[file:assets/arch.png]]

** Client data model
*** Overview

Example of generating UML diagrams from textual descriptions using =plantuml=:

#+CAPTION: Schematic overview of client side data entities
[[./assets/clientmodel.png]]

In the following sections each data field is expressed with type
information, in Java style pseudo-code form.

*** User

| *Field* | *Required* | *Description*                                |
|---------+------------+----------------------------------------------|
| =name=  | N          | User name                                    |
| =email= | N          | User email                                   |
| =role=  | Y          | One of possible values defined by =UserRole= |

Example diagram snippet definiting =User= class in above diagram...

#+BEGIN_SRC plantuml :noweb-ref client-user
class User {
  String name
  String email
  UserRole role
}
#+END_SRC

**** User roles

| *Value*     | *Description*                                       |
|-------------+-----------------------------------------------------|
| =ANONYMOUS= | any non-logged in user                              |
| =USER=      | logged in, registered user with default permissions |
| =ADMIN=     | logged in, registered user with admin permissions   |

#+BEGIN_SRC plantuml :noweb-ref client-user-role
enum UserRole {
  ANONYMOUS
  USER
  ADMIN
}
#+END_SRC

** Technologies used

This section lists the currently envisaged set of technologies used to
implement the system. Links & further explanations of the various
projects are provided in [[#section-glossary][Appendix A]].

- [[gh:clojure/clojurescript][ClojureScript]] :: Modern dialect of Lisp, compiled to
     optimized JavaScript

* Client / server communication
  :PROPERTIES:
  :CUSTOM_ID: section-client-server
  :END:

** Server API requirements
*** Security considerations
*** HTTP requests

The following table summarizes standard HTTP REST requests (as
per [[rfc:7231][RFC7231]]):

| *HTTP Verb* | *Client intention*          | *HTTP Status*  | *HTTP Status*         |
|             |                             | (successful)   | (error)               |
|-------------+-----------------------------+----------------+-----------------------|
| *POST*      | create a new resource       | 201 & redirect | 400 / 403 / 404       |
| *PUT*       | update an existing resource | 200 / 204      | 400 / 403 / 404 / 409 |
| *GET*       | read an existing resource   | 200            | 400 / 403 / 404       |
| *DELETE*    | delete an existing resource | 200 / 204      | 400 / 403 / 404 / 409 |

** Server routes
*** POST =/users/login=

| *Param* | *Required* | *Description*                   |
|---------+------------+---------------------------------|
| =email= | Y          | User's registered email address |
| =pass=  | Y          | User password                   |

*Requires authentication:* NO

*Description:*
Attempts to authenticate user based on given credentials.

*Returns:*
#+HTML: <table><tr><th>Success</th><th>Error</th></tr>
#+HTML: <tr><td>
#+BEGIN_SRC javascript
  {"status": "ok"}
#+END_SRC
#+HTML: </td><td>
#+BEGIN_SRC javascript
  {"status": "ok"}
#+END_SRC
#+HTML: </td></tr></table>

** Clientside SPA routes
*** Route: =/login=

- Displays login dialog
- HTTP POST credentials to server =/login= route
- Redirects to SPA main page

*** Route: =/media/:media_id=

| *Param*    | *Type* | *Description*  |
|------------+--------+----------------|
| =media_id= | UUID   | Media asset ID |

- Retrieves media asset from server
- Displays media asset

* Appendix A - Glossary                                         :informative:
  :PROPERTIES:
  :CUSTOM_ID: section-glossary
  :END:

- AWS :: Amazon Web Services, cloud service provider.
     http://aws.amazon.com/
- ClojureScript :: A modern dialect of Lisp compiling to optimized
     JavaScript using Google Closure compiler. [[gh:clojure/clojurescript]]
- CRUD :: Create, Read, Update, Delete - usually refers to
     adminstration tasks in CMS / database applications
- EDN :: Extensible Data Notation, lightweight, data exchange format
     similar to JSON, but with extensible type support. Native
     serialization format for Clojure / ClojureScript.
     [[gh:edn-format/edn]]
- Google Closure compiler :: Currently best optimizing JavaScript to
     JavaScript compiler. Performs static analysis and whole program
     optimizations to allow efficient deployment of large-scale
     applications. Supports dynamic module loading.
     [[gh:google/closure-compiler]]
- Google Closure library :: Google's standard library for
     cross-browser JavaScript application development. All
     encompassing & optimized for Closure compiler.
     [[gh:google/closure-library]]
- JSON :: JavaScript Object Notation, lightweight defacto industry
     standard data exchange format, especially if parts of a system
     involve JavaScript. http://json.org/
- SPA :: Single-page Application. Refers to a client-side JavaScript
     web application model, usually with different UI modules. All
     essential assets (HTML, JS, CSS) are loaded only once and lead to
     more fluid user experience. Examples: GMail, Google Docs etc.
- Swagger :: Industry defacto standard documentation system for REST
     API endpoints. http://swagger.io/
- UUID :: Universally unique identifier, standardized a 128bit value,
     usually expressed as 32 hex characters. [[wiki:UUID]]

* Appendix B - Building this document                           :informative:
  :PROPERTIES:
  :CUSTOM_ID: section-build-doc
  :END:

This document (including all diagrams) has been generated using the
following tools:

- [[https://emacsformacosx.com/][Emacs]]
- [[http://orgmode.org][Org-mode]]
- [[http://ditaa.sourceforge.net][Ditaa]]
- [[http://graphviz.org][Graphviz]]
- [[http://plantuml.com/][PlantUML]]

** Re-publish an HTML version

The entire source code for this document is stored in the file
=index.org=. Please follow these steps to publish an updated HTML
version of the specification:

1. Install the above listed tools. On OSX *Ditaa*, *GraphViz* and
   *PlantUML* can be installed via Homebrew:

#+BEGIN_SRC shell
  brew update && brew install ditaa graphviz plantuml
#+END_SRC

2. [@2] In Emacs type =M-x load-file RET /path/to/org-theme/config.el=
3. Open the =index.org= file in Emacs
4. Manually evaluate the changelog code block in Section 1
5. If using PlantUML diagrams, export the diagram files via =C-c C-v t=
   and then run =plantuml -tpng assets/*.plantuml= from the command line.
6. Press =C-c C-e h o= to launch the export selection dialog, export
   as HTML and automatically open the file in your web browser

** Re-publish PDF

Follow the same instructions as for HTML and then print the document
to a PDF file via your browser's print dialog. Print style sheets are
included in the file =css/styles.css=.

* Diagram definitions                                              :noexport:
*** Global styles
#+BEGIN_SRC plantuml :noweb-ref uml-style :exports none
skinparam defaultFontName Inconsolata
skinparam defaultFontSize 11

skinparam object {
	BackgroundColor white-#eee
	ArrowColor Black
	BorderColor Black
  FontSize 14
}

skinparam class {
	BackgroundColor white-#eee
	ArrowColor Black
	BorderColor Black
  FontSize 14
}
#+END_SRC

*** Client data model diagram

#+BEGIN_SRC plantuml :noweb yes :tangle ./assets/clientmodel.plantuml :exports none
@startuml

<<uml-style>>

<<client-user>>

<<client-user-role>>

User -right-> "1" UserRole : > has

@enduml
#+END_SRC
